{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"has",
				"hashtable\tstatement"
			],
			[
				"wor",
				"wordToFind"
			],
			[
				"Ha",
				"HashFunction"
			],
			[
				"wo",
				"wordToFind"
			],
			[
				"n",
				"not"
			],
			[
				"is",
				"is\tkeyword"
			],
			[
				"ne",
				"next"
			],
			[
				"hahs",
				"hashKey"
			],
			[
				"the",
				"theWord\tparam"
			],
			[
				"th",
				"theWord"
			],
			[
				"new",
				"newWord"
			],
			[
				"def",
				"definition"
			],
			[
				"Wo",
				"Word\tclass"
			],
			[
				"to",
				"tofind"
			],
			[
				"str",
				"stringHash\tfunction"
			],
			[
				"hash",
				"hashKey"
			],
			[
				"ele",
				"elementsToAdd\tstatement"
			],
			[
				"a",
				"arr\tstatement"
			],
			[
				"No",
				"None\tinstance"
			],
			[
				"re",
				"return\t(simple-chat.py)"
			],
			[
				"cha",
				"charCode"
			],
			[
				"in",
				"int"
			],
			[
				"le",
				"len\t(simple-chat.py)"
			],
			[
				"e",
				"error\tclass"
			],
			[
				"sel",
				"select"
			],
			[
				"outpu",
				"output"
			],
			[
				"SIGI",
				"SIGINT\tinstance"
			],
			[
				"se",
				"self\tparam"
			],
			[
				"du",
				"dumps\tfunction"
			],
			[
				"tr",
				"try\tTry/Except"
			],
			[
				"b",
				"buffer"
			],
			[
				"ser",
				"server_thread"
			],
			[
				"Th",
				"ThreadingMixIn\tclass"
			],
			[
				"cli",
				"client"
			],
			[
				"threa",
				"threading"
			],
			[
				"TH",
				"ThreadedTCPRequestHandler\tclass"
			],
			[
				"SER",
				"SERVER_PORT"
			],
			[
				"Thread",
				"ThreadedTCPServer\tclass"
			],
			[
				"soc",
				"socketserver\t(echo_server.py)"
			],
			[
				"cla",
				"class\tkeyword"
			],
			[
				"sco",
				"sockerserver"
			],
			[
				"pr",
				"print\tfunction"
			],
			[
				"SOCK",
				"sock\tstatement"
			],
			[
				"SOCK_S",
				"SOCK_STREAM\tinstance"
			],
			[
				"sock",
				"socket"
			],
			[
				"by",
				"bytes\tclass"
			],
			[
				"mai",
				"main\tfunction"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"clie",
				"client2"
			],
			[
				"For",
				"ForkedClient\tclass"
			],
			[
				"Fork",
				"ForkedClient"
			],
			[
				"getp",
				"getpid\tfunction"
			],
			[
				"thre",
				"threading\tmodule"
			],
			[
				"SE",
				"SERVER_PORT"
			],
			[
				"FOr",
				"ForkingMixIn\tclass"
			],
			[
				"Ba",
				"BaseRequestHandler\tclass"
			],
			[
				"so",
				"socketserver"
			],
			[
				"eve",
				"event_key"
			],
			[
				"De",
				"DefaultSelector\tclass"
			],
			[
				"EVE",
				"EVENT_WRITE\tstatement"
			],
			[
				"sele",
				"selectors\tmodule"
			],
			[
				"ch",
				"children"
			],
			[
				"num",
				"number_of_nodes"
			],
			[
				"chi",
				"children_num"
			],
			[
				"chil",
				"children"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import select\nimport socket\nimport signal\nimport pickle\nimport struct\nimport argparse\nimport sys\n\n\nSERVER_HOST = 'localhost'\nCHAT_SERVER_NAME = 'server'\n\n\n# Some utilities\ndef send(channel, *args):\n    buffer = pickle.dumps(args)\n    value = socket.htonl(len(buffer))\n    size = struct.pack(\"L\", value)\n    channel.send(size)\n    channel.send(buffer)\n\n\ndef recieve(channel):\n    size = struct.calcsize(\"L\")\n    size = channel.recv(size)\n\n    try:\n        size = socket.ntohl(struct.unpack(\"L\", size)[0])\n    except struct.error as e:\n        return ''\n\n    buf = b''\n\n    while len(buf) < size:\n        buf = channel.recv(size - len(buf))\n    return pickle.loads(buf)[0]\n\n\nclass ChatServer:\n    \"\"\" An example chat server using select \"\"\"\n\n    def __init__(self, port, backlog=5):\n        self.clients = 0\n        self.clientmap = {}\n        self.outputs = []  # list output sockets\n        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        # Enable re-run of the socket\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.server.bind((SERVER_HOST, port))\n        print(f\"Listening on {port}\")\n        self.server.listen(backlog)\n\n        # Catch keyboard interrupts\n        signal.signal(signal.SIGINT, self.sighandler)\n\n    def sighandler(self, signum, frame):\n        \"\"\" Clean up client outputs \"\"\"\n        # Clost the server\n        print('Closing')\n        # Close existing client sockets\n        for output in self.outputs:\n            output.close()\n        self.server.close()\n\n    def get_client_name(self, client):\n        \"\"\" Return the name of the client \"\"\"\n        info = self.clientmap[client]\n        host, name = info[0][0], info[1]\n        return '@'.join((name, host))\n\n    def run(self):\n        inputs = [self.server, sys.stdin]\n        self.outputs = []\n        running = True\n        while running:\n            try:\n                readable, writable, exceptional = select.select(\n                    inputs, self.outputs, [])\n            except select.error as e:\n                break \n",
			"file": "simple-chat.py",
			"file_size": 2069,
			"file_write_time": 131452908985433205,
			"settings":
			{
				"buffer_size": 2070,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 372.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/stux/Codes/CodesCollections/python/Network Programming"
	],
	"file_history":
	[
		"/home/stux/Codes/AlgoDS/Python/Hash-Table-3.py",
		"/home/stux/Codes/untitled.py",
		"/home/stux/Codes/CodesCollections/python/Network Programming/networking.sublime-project",
		"/home/stux/Codes/CodesCollections/python/Network Programming/echo_server_threading.py",
		"/home/stux/Codes/CodesCollections/python/Network Programming/echo_server.py",
		"/home/stux/Codes/CodesCollections/python/Network Programming/echo_server_thrwading.py",
		"/media/eosHome/stux/Git/My-Simple-Programs/java/Derek Banas Java Algorithms/java-shell-sort.java",
		"/home/stux/Codes/CodesCollections/python/500L Async Scraper/using-selector\\.py",
		"/home/stux/Codes/CodesCollections/python/500L Async Scraper/traditional crawler.py",
		"/home/stux/.config/sublime-text-3/Packages/BeautifyRuby/BeautifyRuby.sublime-settings",
		"/home/stux/.config/sublime-text-3/Packages/User/Plain text.sublime-settings",
		"/home/stux/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/stux/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "simple-chat.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2070,
						"regions":
						{
						},
						"selection":
						[
							[
								2069,
								2069
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 572.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "networking.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
